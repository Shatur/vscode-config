[
    // Tab completion
    {
        "key": "tab",
        "command": "selectNextSuggestion",
        "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
    },
    {
        "key": "shift+tab",
        "command": "selectPrevSuggestion",
        "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
    },
    
    // Copy lines
    {
        "key": "ctrl+alt+up",
        "command": "editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+alt+down",
        "command": "editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    
    // Move lines (use default VSCode actions for normal mode and Neovim for other cases)
    {
        "key": "alt+j",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && neovim.mode != 'visual'"
    },
    {
        "key": "alt+k",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && neovim.mode != 'visual'"
    },
    {
        "key": "alt+j",
        "command": "vscode-neovim.send",
        "when": "editorTextFocus && neovim.mode == 'visual'",
        "args": "<A-j>"
    },
    {
        "key": "alt+k",
        "command": "vscode-neovim.send",
        "when": "editorTextFocus && neovim.mode == 'visual'",
        "args": "<A-k>"
    },
    {
        "key": "alt+h",
        "command": "vscode-neovim.send",
        "when": "editorTextFocus && neovim.mode == 'visual'",
        "args": "<A-h>"
    },
    {
        "key": "alt+l",
        "command": "vscode-neovim.send",
        "when": "editorTextFocus && neovim.mode == 'visual'",
        "args": "<A-l>"
    },
    
    // Launch without debug
    {
        "key": "f6",
        "command": "workbench.action.debug.run"
    },
    
    // CMake
    {
        "key": "f1",
        "command": "cmake.onlineHelp",
        "when": "resourceLangId == cmake"
    },
    {
        "key": "ctrl+f6",
        "command": "cmake.launchTarget",
        "when": "cmake:enableFullFeatureSet && !cmake:hideDebugCommand && !inDebugMode"
    },
    {
        "key": "shift+f5",
        "command": "-cmake.launchTarget",
        "when": "cmake:enableFullFeatureSet && !cmake:hideDebugCommand && !inDebugMode"
    },
    {
        "key": "shift+f5",
        "command": "cmake.selectLaunchTarget",
        "when": "cmake:enableFullFeatureSet && !cmake:hideDebugCommand && !inDebugMode"
    },
    {
        "key": "shift+f7",
        "command": "-cmake.buildWithTarget",
        "when": "cmake:enableFullFeatureSet"
    },
    {
        "key": "shift+f7",
        "command": "cmake.setDefaultTarget",
        "when": "cmake:enableFullFeatureSet && !cmake:hideDebugCommand && !inDebugMode"
    },
    {
        "key": "f8",
        "command": "cmake.configure",
        "when": "cmake:enableFullFeatureSet && !cmake:hideDebugCommand && !inDebugMode"
    },
    {
        "key": "alt+f7",
        "command": "cmake.cleanRebuild",
        "when": "cmake:enableFullFeatureSet && !cmake:hideDebugCommand && !inDebugMode"
    },
    {
        "key": "alt+f8",
        "command": "cmake.cleanConfigure",
        "when": "cmake:enableFullFeatureSet && !cmake:hideDebugCommand && !inDebugMode"
    },
    {
        "key": "ctrl+f7",
        "command": "cmake.buildWithTarget",
        "when": "cmake:enableFullFeatureSet && !cmake:hideDebugCommand && !inDebugMode"
    },
    {
        "key": "shift+f8",
        "command": "cmake.setVariant",
        "when": "cmake:enableFullFeatureSet && !cmake:hideDebugCommand && !inDebugMode"
    },
    {
        "key": "alt+backspace",
        "command": "cmake.stop",
        "when": "cmake:enableFullFeatureSet && !cmake:hideDebugCommand && !inDebugMode"
    },
    {
        "key": "alt+backspace",
        "command": "workbench.action.debug.stop",
        "when": "inDebugMode"
    },
    
    // Godot
    {
        "key": "f1",
        "command": "godot-tool.list_native_classes",
        "when": "resourceLangId == gdscript"
    },
    
    // C++
    {
        "key": "f1",
        "command": "cppref.open",
        "when": "resourceLangId == cpp"
    },
    {
        "key": "shift+f1",
        "command": "cppref.search",
        "when": "resourceLangId == cpp"
    },
    
    // Tabs and splits
    {
        "key": "ctrl+q",
        "command": "-workbench.action.quit"
    },
    {
        "key": "ctrl+q",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeWindow",
        "when": "!editorIsOpen && !multipleEditorGroups"
    },
    {
        "key": "ctrl+w s",
        "command": "workbench.action.splitEditorOrthogonal",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+w v",
        "command": "workbench.action.splitEditor",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+h",
        "command": "workbench.action.focusLeftGroup"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.focusAboveGroup"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.focusBelowGroup"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.focusRightGroup"
    },
    
    // Remove Ctrl + C for exit
    {
        "key": "ctrl+c",
        "command": "vscode-neovim.escape",
        "when": "editorTextFocus && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+c",
        "command": "-vscode-neovim.escape",
        "when": "editorTextFocus && neovim.init"
    },
    
    // Change shortcuts for indents in insert mode
    {
        "key": "ctrl+]",
        "command": "-editor.action.indentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+]",
        "command": "-markdown.extension.onIndentLines",
        "when": "editorTextFocus && !suggestWidgetVisible && editorLangId == 'markdown'"
    },
    {
        "key": "alt+,",
        "command": "editor.action.outdentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+[",
        "command": "-editor.action.outdentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+[",
        "command": "-markdown.extension.onOutdentLines",
        "when": "editorTextFocus && !suggestWidgetVisible && editorLangId == 'markdown'"
    },

    // Multiply cursors
    {
        "key": "alt+m",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorTextFocus && neovim.init && neovim.mode == 'insert'"
    },
    {
        "key": "alt+m",
        "command": "vscode-neovim.send",
        "when": "editorTextFocus && neovim.init && neovim.mode != 'insert'",
        "args": "<A-m>"
    },
    {
        "key": "ctrl+down",
        "command": "editor.action.insertCursorBelow",
        "when": "editorTextFocus && neovim.init && neovim.mode == 'insert'"
    },
    {
        "key": "ctrl+down",
        "command": "vscode-neovim.send",
        "when": "editorTextFocus && neovim.init && neovim.mode != 'insert'",
        "args": "<C-Down>"
    },
    {
        "key": "ctrl+shift+down",
        "command": "-editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+up",
        "command": "editor.action.insertCursorAbove",
        "when": "editorTextFocus && neovim.init && neovim.mode == 'insert'"
    },
    {
        "key": "ctrl+up",
        "command": "vscode-neovim.send",
        "when": "editorTextFocus && neovim.init && neovim.mode != 'insert'",
        "args": "<C-Up>"
    },
    {
        "key": "ctrl+shift+up",
        "command": "-editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },

    
    // Mimic some other default vim shortcuts in the whole VSCode
    {
        "key": "ctrl+w",
        "command": "deleteWordLeft",
        "when": "editorTextFocus && !neovim.recording && neovim.mode == 'insert'"
    },
    {
        "key": "ctrl+w",
        "command": "-deleteWordLeft",
        "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'"
    },
    {
        "key": "shift+z shift+z",
        "command": "workbench.action.quit",
        "when": "editorTextFocus && neovim.mode != 'insert' || !inputFocus"
    },
    {
        "key": "ctrl+o",
        "command": "workbench.action.navigateBack",
        "when": "editorTextFocus && !neovim.recording && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+i",
        "command": "workbench.action.navigateForward",
        "when": "editorTextFocus && !neovim.recording && neovim.mode != 'insert'"
    },

    // Mimimic my custom shortcuts
    {
        "key": "ctrl+=",
        "command": "vscode-neovim.send",
        "when": "editorTextFocus && neovim.mode == 'normal'",
        "args": "<C-=>"
    },
    {
        "key": "ctrl+-",
        "command": "vscode-neovim.send",
        "when": "editorTextFocus && neovim.mode == 'normal'",
        "args": "<C-->"
    },
    {
        "key": "ctrl+=",
        "command": "-workbench.action.zoomIn"
    },
    {
        "key": "ctrl+-",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "alt+f",
        "command": "workbench.view.explorer"
    },
    {
        "key": "alt+g",
        "command": "workbench.view.scm"
    },
    {
        "key": "ctrl+/",
        "command": "workbench.action.findInFiles",
        "when": "neovim.mode != 'insert'"
    },
    {
        "key": "alt+s",
        "command": "workbench.action.openGlobalKeybindings"
    },
    {
        "key": "alt+b",
        "command": "git.checkout"
    },
    {
        "key": "alt+i",
        "command": "editor.action.formatSelection",
        "when": "editorHasDocumentSelectionFormattingProvider && editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+=",
        "command": "workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "alt+-",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "alt+p",
        "command": "workbench.action.openRecent"
    },
    {
        "key": "alt+u",
        "command": "git.push"
    },
    {
        "key": "alt+y",
        "command": "git.pullRebase"
    },

    // Other
    {
        "key": "alt+h",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "alt+n",
        "command": "workbench.view.extension.l13Projects"
    },
    {
        "key": "alt+x",
        "command": "workbench.view.extensions"
    },
    {
        "key": "alt+d",
        "command": "workbench.view.debug"
    },
    {
        "key": "alt+/",
        "command": "actions.find"
    },
    {
        "key": "ctrl+alt+i",
        "command": "cpp-helper.create-implementation"
    }
]
